// scripts/generate-env-production.js
import { randomBytes } from 'node:crypto';
import { writeFile, access, mkdir } from 'node:fs/promises';
import { constants } from 'node:fs';
import readline from 'node:readline';
import { stdin as input, stdout as output } from 'node:process';
import { fileURLToPath } from 'node:url';
import path from 'node:path';

const ROOT_DIR = path.dirname(fileURLToPath(import.meta.url));
const ENV_PATH = path.join(ROOT_DIR, '../.env.production');
const DATA_DIR = path.join(ROOT_DIR, '../data');

function generateHexKey(bytes = 32) {
  return randomBytes(bytes).toString('hex');
}

async function fileExists(p) {
  try {
    await access(p, constants.F_OK);
    return true;
  } catch {
    return false;
  }
}

function promptPort(defaultPort = 3001) {
  const rl = readline.createInterface({ input, output });
  return new Promise((resolve) => {
    rl.question(`Enter port number [default: ${defaultPort}]: `, (answer) => {
      rl.close();
      const port = parseInt(answer.trim(), 10);
      resolve(Number.isNaN(port) ? defaultPort : port);
    });
  });
}

async function main() {
  if (await fileExists(ENV_PATH)) {
    console.error('‚ùå .env.production already exists. Aborting.');
    process.exit(1);
  }

  if (!(await fileExists(DATA_DIR))) {
    await mkdir(DATA_DIR, { recursive: true });
    console.log(`üìÅ Created missing data directory at: ${DATA_DIR}`);
  }

  const port = await promptPort();

  const content = `# Autogenerated production .env

ENCRYPTION_KEY=${generateHexKey(32)}
ADMIN_API_KEY=${generateHexKey(16)}
LICENSE_SIGNING_SECRET=${generateHexKey(32)}

NODE_ENV=production
PORT=${port}
DATABASE_FILE=./data/prod.db
`;

  await writeFile(ENV_PATH, content);
  console.log('‚úÖ .env.production has been created successfully.');
}

main();
